?start : claim*
claim : type_claim

type_claim : typename_stmt ":" def_stmt NEWLINE*

// typename statement
typename_stmt : type_constraint? typename
typename : CNAME
type_constraint : "intern" // typename constraint keyword

// definition statement
def_stmt : struct_defstmt | func_defstmt | interface_defstmt | basic_defstmt
struct_defstmt : struct_def_constraint? struct_defbody
func_defstmt : func_def_constraint? func_defbody
interface_defstmt : interface_defbody
basic_defstmt : basic_defbody

struct_def_constraint : "with" // definition constraint keyword
func_def_constraint : "noexcept" // definition constraint keyword

// struct definition body
struct_defbody : "struct" "{" struct_claims "}"
struct_claims : claim*

// function definition body
func_defbody : "(" (typename_stmt ":" def_stmt ("," typename_stmt ":" def_stmt)*)? ")" "->" typename "{" executable_stmt "}"
executable_stmt : (single_executable_stmt NEWLINE)*

// single line executable statement
single_executable_stmt : varname ":=" basic_varbody

// varname statement
varname : CNAME

// interface definition body
interface_defbody : "interface" "{" interface_claims "}"
interface_claims : "not_implement"// TODO: only takes method and member for now

// basic definition
basic_defbody : "int32" -> int32
              | "int64" -> int64
              | "float32" -> float32
              | "float64" -> float64
              | "uint8" -> uint8
              | "string" -> string

basic_varbody : ESCAPED_STRING | SIGNED_FLOAT | SIGNED_INT | INT | FLOAT
// string : ESCAPED_STRING

%import common.ESCAPED_STRING
%import common.SIGNED_FLOAT
%import common.SIGNED_INT
%import common.INT
%import common.FLOAT
%import common.NEWLINE
%import common.CNAME
%import common.WS
%ignore WS