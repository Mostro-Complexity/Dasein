?start : claim*
claim : definition NEWLINE*

param_claim : typename ":" basic_definition NEWLINE*
field_claim : typename ":" basic_definition NEWLINE*

// typename statement
typename_stmt : type_constraint? typename
typename : CNAME
type_constraint : "intern" // typename constraint keyword

// function input/output parameters
func_input_params : (param_claim ("," param_claim)*)? 
func_output_params : (typename ("," typename)*)?

// definition body
definition : struct_definition | func_definition | interface_definition | field_claim

struct_constraint : "intern" // definition constraint keyword
func_constraint : "noexcept" // definition constraint keyword

// struct definition body
struct_definition : struct_constraint? "type" typename "struct" "{" field_claim* "}"

// function definition body
func_definition : func_constraint? "func" typename "(" func_input_params ")" "->" (typename | "(" func_output_params ")") "{" executable_stmt "}"
executable_stmt : (single_executable_stmt NEWLINE)*

// single line executable statement
single_executable_stmt : varname ":=" basic_varbody

// varname statement
varname : CNAME

// interface definition body
interface_definition : "type" typename "interface" "{" interface_claims "}"
interface_claims : "not_implement"// TODO: only takes method and member for now

// basic definition
basic_definition : "int32" -> int32
                 | "int64" -> int64
                 | "float32" -> float32
                 | "float64" -> float64
                 | "uint8" -> uint8
                 | "string" -> string

basic_varbody : ESCAPED_STRING -> literal_string
              | SIGNED_FLOAT -> literal_signed_float
              | SIGNED_INT -> literal_signed_int
              | INT -> literal_int
              | FLOAT -> literal_float
              | basic_expression

basic_expression : basic_varbody "+" basic_varbody -> add_expression
                 | basic_varbody "-" basic_varbody -> minus_expression
                 | basic_varbody "*" basic_varbody -> multiply_expression
                 | basic_varbody "/" basic_varbody -> divide_expression

%import common.ESCAPED_STRING
%import common.SIGNED_FLOAT
%import common.SIGNED_INT
%import common.INT
%import common.FLOAT
%import common.NEWLINE
%import common.CNAME
%import common.WS
%ignore WS